using Browser.Core.Framework;
using NUnit.Framework;
using OpenQA.Selenium;
using System.Collections.Generic;
using AMA.AppFramework;
using System;
using AMA.AppFramework.Utils.User;
using static AMA.AppFramework.Utils.User.UserUtils;
using System.Threading;


namespace AMA.UITest
{
    //[BrowserMode(BrowserMode.New)]
    //[LocalSeleniumTestFixture(BrowserNames.Chrome)]
    //[LocalSeleniumTestFixture(BrowserNames.Firefox)]
    //[LocalSeleniumTestFixture(BrowserNames.InternetExplorer)]
    [RemoteSeleniumTestFixture(BrowserNames.Chrome)]
    [RemoteSeleniumTestFixture(BrowserNames.Firefox)]
    [RemoteSeleniumTestFixture(BrowserNames.InternetExplorer)]
    [TestFixture]
    public class AMA_Admin_Tests : TestBase
    {
                
        #region Constructors
        public AMA_Admin_Tests(string browserName) : base(browserName) { }

        // Remote Selenium Grid Test
        public AMA_Admin_Tests(string browserName, string version, string platform, string hubUri, string extrasUri)
                                    : base(browserName, version, platform, hubUri, extrasUri)
        {
            //report = new ExtentReports();
            //IExtentReporter reporter = new ExtentHtmlReporter(@"C:\Users\achariye\Desktop\Reports\report.html");
            //report.AttachReporter(reporter);
        }
        #endregion


        #region Tests


        [TestCase(UserRole.Admin)]
        [TestCase(UserRole.Ama_Staff)]
        [Description("Workflow verifying Admins and Ama_staff can manipulate instutions like Edit, Mark Inactive, Creating Program")]
        [Property("Status", "Complete")]
        [Author("Azat Chariyev")]
       
        public void InstitutionManagement(UserRole userRole)
        {
            //test = report.CreateTest("Institution Management");

            ///  1. Navigate to the login page and login as a Admin
            UserInfo role = UserUtils.GetUser(userRole);
            LoginPage LP = Navigation.GoToLoginPage(browser);
            EducationCenterPage ED = LP.LoginAsUser(role.Username, role.Password);
            if (BrowserName == BrowserNames.Firefox)
            {
                Browser.WaitForElement(Bys.EducationCenterPage.GcepLnk, ElementCriteria.IsEnabled);
            }

            ///  2.click to GCEP link  navigate to Gcep page and waiting load icon disappear
            GCEPPage Gcep = ED.ClickToAdvance(ED.GcepLnk);

            ///  3.Clicking User Management link  and navigating to Institution Management Page          
            InstitutionsPage Institutions = Gcep.ClickToAdvance(Gcep.InstitutionManagLnk);

            ///  4.From action gear clicking to mark inactive and verifiying alert is generated by checking button aviability.
            Institutions.Select("ins-admin-action-active", "Mark Inactive");
            Thread.Sleep(0500);
            Assert.IsTrue(Institutions.AcceptBtn.Displayed);
            Institutions.DismissBtn.Click();

            ///  5.Searching for specicfic user and checking edit user enabled by clicking and verifying url and navigating back by clicking cancel button
            Institutions.Select("ins-admin-action-active", "Edit Institution");
            Thread.Sleep(0500);
            Assert.IsTrue(Browser.Url.Contains("update"));
           // ElemSet.ScrollToElement(Browser, Institutions.CancelBtn);
            Institutions.CancelBtn.Click();
            Institutions.WaitForInitialize();

            //test.Log(Status.Pass, "");
            //report.Flush();

            ///  6.From action gear clicking to create program and verifiying url is changed.
            Institutions.Select("ins-admin-action-active", "Create Program");
            Thread.Sleep(0500);
            Assert.IsTrue(Browser.Url.Contains("programs/add"));
            Institutions.CancelBtn.Click();

            //test.Log(Status.Pass, "");
            //report.Flush();
            //test.Log(Status.Fail, "");
            //report.Flush();

        }


        [TestCase(UserRole.Admin)]
        [TestCase(UserRole.Ama_Staff)]
        [Description("Workflow verifying Admins and Ama_staff can manipulate users like Edit User,Mark Inactive,Send Notification")]
        [Property("Status", "Complete")]
        [Author("Azat Chariyev")]
        public void User_Management(UserRole userRole)
        {            
            ///  1. Navigate to the login page and login as a Admin
            UserInfo role = UserUtils.GetUser(userRole);
            LoginPage LP = Navigation.GoToLoginPage(browser);
            EducationCenterPage ED = LP.LoginAsUser(role.Username, role.Password);
            if (BrowserName == BrowserNames.Firefox)
            {
                Browser.WaitForElement(Bys.EducationCenterPage.GcepLnk, ElementCriteria.IsEnabled);
            }

            ///  2.click to GCEP link  navigate to Gcep page and waiting load icon disappear
            GCEPPage Gcep = ED.ClickToAdvance(ED.GcepLnk);

            ///  3.Clicking User Management link  and navigating to User Management Page           
            GCEPUserMngPage User = Gcep.ClickToAdvance(Gcep.UserManageLnk);

            ///  4.Searching for specicfic user and checking edit user enabled by clicking verifying url and navigating back by clicking cancel button
            User.SearchTxt.SendKeys("Aabo");
            Thread.Sleep(0500);
            User.Select("ins-admin-action-active", "Edit User");
            Thread.Sleep(0500);
            Assert.IsTrue(Browser.Url.Contains("users/manageuser"));
            User.CancelBtn.Click();

            ///  5.from action gear clicking to Send notification and verifying url and navigating back by clicking cancel button
            User.Select("ins-admin-action-active", "Send Notification");
            Thread.Sleep(0500);
            Assert.IsTrue(Browser.Url.Contains("users/sendnotification"));
            User.CancelSendBtn.Click();

            ///  6.from action gear clicking to mark inactive and verifiying alert is generated by checking button aviability.
            User.Select("ins-admin-action-active", "Mark Inactive");
            Thread.Sleep(0500);  
            Assert.IsTrue(User.AcceptBtn.Displayed);
            User.DismissBtn.Click();
           
        }

             

        [Test]
        [Description("Workflow As an Admin within GCEP. I want the capability to Toggle multiple institutions and drilling down " +
        "This test is creating curriculum for Institution and verifying its not displayed for other Institutions")]
        [Property("Status", "Complete")]
        [Author("Azat Chariyev")]

        public void MultyInstitution_CreatingCurriculum()
        {
            string curriculumName = "";
            if (BrowserName == BrowserNames.Chrome)
            {
                curriculumName = "Chrome2CurrName";
            }
            if (BrowserName == BrowserNames.Firefox)
            {
                curriculumName = "FireFox2CurrName";
            }
            if (BrowserName == BrowserNames.InternetExplorer)
            {
                curriculumName = "IE2CurrName";
            }
            ///  1.Navigate to the login page login as a Admin witn below credentials
            LoginPage LP = Navigation.GoToLoginPage(browser);
            EducationCenterPage ED = LP.LoginAsUser("10016185", "password");
            if (BrowserName == BrowserNames.Firefox)
            {
                Browser.WaitForElement(Bys.EducationCenterPage.GcepLnk, ElementCriteria.IsEnabled);
            }

            ///  2.click to GCEP link  navigate to Gcep page and waiting load icon disappear
            GCEPPage GCEP = ED.ClickToAdvance(ED.GcepLnk);

            Browser.WaitForElement(Bys.GCEPPage.InstitutionSelElem, ElementCriteria.IsEnabled);

            ///  3.Verifiying breadcrump is the same as a Institution name saving Institution name and count of users for Institution
            Assert.True(GCEP.SelectProgramAndVerifyBreadcrump(GCEP.InstitutionSelElem));
            string InstitutionName = GCEP.ReturnValueAfterSelectingInstitution(1);
            int FirstInstitutionUserCount = Int32.Parse(GCEP.TotalUsersCountLnk.Text);

            Browser.WaitForElement(Bys.GCEPPage.UserManageLnk,TimeSpan.FromSeconds(90), ElementCriteria.IsEnabled, ElementCriteria.IsVisible);

            ///  4.Clicking Curruculum template link creating curriculum with name depending on browser name
            CurriculumMngPage CurTemp = GCEP.ClickToAdvance(GCEP.CurriculumTemplatesLnk);
            CurTemp.Search(curriculumName);
            if (Browser.FindElements(Bys.CurriculumMngPage.NoRecordLbl).Count > 0)
            {
                CurriculumCoursePage CurCoursPage = CurTemp.ClickToAdvance(CurTemp.CreateCurriculumTemplateBtn);
                HelperMethods.CurriculumCreationFlow(browser,curriculumName);

            }                  

            ///  5.Cliking to the the breadcrump with Institution name and naviagting GCEP page
            GCEP = CurTemp.ClickToBreadCrumbContainerToReturnGcep(InstitutionName);            

            ///  6.Choosing second Institution from  Dropdown and saving Institution name and count of users for Institution
            string secondInstutionName = GCEP.ReturnValueAfterSelectingInstitution(2);
            int SecondInstitutionUserCount = Int32.Parse(GCEP.TotalUsersCountLnk.Text);
            Assert.True(GCEP.SelectProgramAndVerifyBreadcrump(GCEP.InstitutionSelElem));

            ///  7.Clicking Curruculum template link searching for curriculum what we create for first Institution
            CurTemp = GCEP.ClickToAdvance(GCEP.CurriculumTemplatesLnk);
            CurTemp.Search(curriculumName);

            ///  8. Verifiying curriculum not displayed for different Institution 
            Assert.True(CurTemp.NoRecordLabel.Displayed);            

            ///  9.Clicking breadcrump with second Institution name and navigating to GCEP page
            GCEP = CurTemp.ClickToBreadCrumbContainerToReturnGcep(secondInstutionName);            

            ///  10.Verifiying breadcrump is the same as a Institution name saving Institution name and count of users for third Institution
            Assert.True(GCEP.SelectProgramAndVerifyBreadcrump(GCEP.InstitutionSelElem));
            string thirdInstitutionName = GCEP.ReturnValueAfterSelectingInstitution(3);
            int ThirdInstitutionUserCount = Int32.Parse(GCEP.TotalUsersCountLnk.Text);

            ///  11.Clicking Curruculum template link searching for curriculum what we create for first Institution
            CurTemp = GCEP.ClickToAdvance(GCEP.CurriculumTemplatesLnk);
            CurTemp.Search(curriculumName);

            ///  12.Verifiying curriculum not displayed for a different Institution 
            Assert.True(CurTemp.NoRecordLabel.Displayed);

            ///  13.Clicking breadcrump with third Institution name and navigating to GCEP page
            GCEP = CurTemp.ClickToBreadCrumbContainerToReturnGcep(thirdInstitutionName);

            ///  14.Verifiying breadcrump is the same as a Institution name saving Institution name and count of users for fourth Institution
            Assert.True(GCEP.SelectProgramAndVerifyBreadcrump(GCEP.InstitutionSelElem));
            string fourthInstitutionName = GCEP.ReturnValueAfterSelectingInstitution(4);           
            int FourthInstitutionUserCount = Int32.Parse(GCEP.TotalUsersCountLnk.Text);

            ///  15.Clicking Curruculum template link searching for curriculum what we create for first Institution
            CurTemp = GCEP.ClickToAdvance(GCEP.CurriculumTemplatesLnk);
            CurTemp.Search(curriculumName);

            ///  16.Verifiying curriculum not displayed for a different Institution 
            Assert.True(CurTemp.NoRecordLabel.Displayed);        

            ///  17.Clicking breadcrump with fourth Institution name and navigating to GCEP page
            GCEP = CurTemp.ClickToBreadCrumbContainerToReturnGcep(fourthInstitutionName);

            ///  18.Verifiying breadcrump is the same as a Institution name saving Institution name and count of users for fifth Institution
            Assert.True(GCEP.SelectProgramAndVerifyBreadcrump(GCEP.InstitutionSelElem));
            string fifthInstitutionName = GCEP.ReturnValueAfterSelectingInstitution(5);
            int FifthInstitutionUserCount = Int32.Parse(GCEP.TotalUsersCountLnk.Text);


            ///  19.Clicking Curruculum template link searching for curriculum what we create for first Institution
            CurTemp = GCEP.ClickToAdvance(GCEP.CurriculumTemplatesLnk);            
            CurTemp.Search(curriculumName);

            ///  20.Verifiying curriculum not displayed for a different Institution 
            Assert.True(CurTemp.NoRecordLabel.Displayed);


            ///  21.Clicking breadcrump with fifth Institution name and navigating to GCEP page
            GCEP = CurTemp.ClickToBreadCrumbContainerToReturnGcep(fifthInstitutionName);

            ///  22. Choosing first Institution waiting for initialize page 
            GCEP.InstitutionSelElem.SelectByText(InstitutionName);
            GCEP.WaitForInitialize();

            ///  23.Clicking Curruculum template link searching for curriculum what we create for first Institution
            CurTemp = GCEP.ClickToAdvance(GCEP.CurriculumTemplatesLnk);
            CurTemp.Search(curriculumName);

            ///  24. Deleting curriculum and verifying label is displayed
            CurTemp.DeleteCurriculum(curriculumName);
            Assert.IsTrue(CurTemp.NoRecordLabel.Displayed);

            ///  25.Verifying counts of user for each Institution not equal.
            Assert.False(DataUtils.intsEqual(FirstInstitutionUserCount, SecondInstitutionUserCount, ThirdInstitutionUserCount, FourthInstitutionUserCount, FifthInstitutionUserCount));
            //Assert.True(DataUtils.intsEqual(FirstInstitutionUserCount, FirstInstitutionUserCount, FirstInstitutionUserCount, FirstInstitutionUserCount));
            //Assert.False(DataUtils.intsEqual(FirstInstitutionUserCount, FirstInstitutionUserCount, FirstInstitutionUserCount, FirstInstitutionUserCount, SecondInstitutionUserCount));
            //Assert.False(DataUtils.intsEqual(FirstInstitutionUserCount));
            //Assert.True(DataUtils.intsEqual(FirstInstitutionUserCount, FirstInstitutionUserCount));

        }


       
        [Test]
        [Description("Admin promoting resident PGY flow.")]
        [Property("Status", "Complete")]
        [Author("Azat Chariyev")]

        public void PromotePGY()
        {
            ///  1. Navigate to the login page and login as a Admin
            LoginPage LP = Navigation.GoToLoginPage(browser);
            EducationCenterPage ED = LP.LoginAsUser("10013616", "password");   //10004610        
            if (BrowserName == BrowserNames.Firefox)
            {
                Browser.WaitForElement(Bys.EducationCenterPage.GcepLnk, ElementCriteria.IsEnabled);
            }
            ///  2.click to GCEP link  navigate to Gcep page and waiting load icon disappear
            GCEPPage Gcep = ED.ClickToAdvance(ED.GcepLnk);

            ///  3. Go to the promote pgy page and then add an availavle redisent to the selected list choosing different user for each browser.
            PromotePGYPage ProPGY = Gcep.ClickToAdvance(Gcep.PromotePGYLnk);
            if (BrowserName == BrowserNames.Firefox)
            {
                ProPGY.AddOrRemoveResidents(ProPGY.AvailableResidentsPromotePGYTbl, ProPGY.AddSelectedBtn, 1);
            }
            if (BrowserName == BrowserNames.Chrome)
            {
                ProPGY.AddOrRemoveResidents(ProPGY.AvailableResidentsPromotePGYTbl, ProPGY.AddSelectedBtn, 3);
            }
            if (BrowserName == BrowserNames.InternetExplorer)
            {
                ProPGY.AddOrRemoveResidents(ProPGY.AvailableResidentsPromotePGYTbl, ProPGY.AddSelectedBtn, 2);
            } 

            /// 4. Grab the year value from the select table, open the form, and then assert that the New Year 
            /// element's value increased 1 year from the tables value
            int chosenResidentsTableYearValue = Convert.ToInt32( ProPGY.Grid_GetValueOfCell(ProPGY.ChoosenResidentsPromotePGYTbl));

            ///  5. Clicking promote button waiting to pop up appear getting name and new year what will be updated
            ProPGY.PromoteBtn.Click();
            Browser.WaitForElement(Bys.PromotePGYPage.FormConfirmBtn,TimeSpan.FromSeconds(180), ElementCriteria.IsVisible, ElementCriteria.IsEnabled);
            int promotePGYFormNewYearValue = Convert.ToInt32(ProPGY.GetValueOfCell(ProPGY.FormResidentsDescriptionTbl,2));
            string Resident_FullName = ProPGY.GetValueOfCell(ProPGY.FormResidentsDescriptionTbl, 0);

            ///  6. Verifying  new year are equals year value from choosen resident increase 1 year and clicking confirmation button
            Assert.AreEqual(chosenResidentsTableYearValue + 1, promotePGYFormNewYearValue);
            Gcep = ProPGY.ClickToAdvance(ProPGY.FormConfirmBtn);

            ///  7. After confirmation  its getting Gcep page and clicking user managment link and searching for users by name what we promoted
            GCEPUserMngPage UMP = Gcep.ClickToAdvance(Gcep.UserManageLnk);

            // Extracting the first name from the resident to then search on first name
            var Resident_FirstAndLastName = Resident_FullName.Split(',');
            string Resident_LastName = Resident_FirstAndLastName[0];
            UMP.Search(Resident_LastName);

            //IWebElement UserLnk1 = browser.FindElement(By.LinkText(Resident_FullName));
            ///  8. Clicking on user and navigating User management page
            UserManagementPage UMPG = UMP.chooseUser(Resident_FullName);

            ///  9. Getting value as a year from user pgy and user name
            int userManagementPageYearValue = Convert.ToInt32(UMPG.UserPgySelElem.SelectedOption.Text);
            string Resident_Fullname_Expected = UMPG.UserNameTxt.GetAttribute("value");

            ///  10. Verifying user pgy year equals to promote new year value and the user name with last name are the same
            Assert.AreEqual(userManagementPageYearValue, promotePGYFormNewYearValue);
            Assert.AreEqual(Resident_FullName, Resident_Fullname_Expected, "Resident name from available promote pgy table are not the same with user management page");
           
        }


        [Test]
        [Description("Validate Customized Help Page by Different Institution for an Admin with Multy Institutions  Management aviability")]
        [Property("Status", "Complete")]
        [Author("Azat Chariyev")]
        public void MultyInstitution_HelpPageVerification()
        {
            ///  1.Navigate to the login page login as Admin with availability manage multy Institutions
            UserInfo role = UserUtils.GetUser(UserRole.Ama_Staff);
            LoginPage LP = Navigation.GoToLoginPage(browser);
            EducationCenterPage ED = LP.LoginAsUser("10016185", "password");

            if (BrowserName == BrowserNames.Firefox)
            {
                Browser.WaitForElement(Bys.EducationCenterPage.GcepLnk, ElementCriteria.IsEnabled);
            }

            ///  2.click to GCEP link  navigate to Gcep page and waiting load icon disappear
            GCEPPage Gcep = ED.ClickToAdvance(ED.GcepLnk);
            
            ///  3.Saving all Institutions from drop down in list of strings and Sign Out
            List<string> institutions = ElemGet.SelElem_ListTextToListString(Gcep.InstitutionSelElem);

            Gcep.ClickToAdvance(Gcep.SignOutLnk);

            ///  4.Sign in again as Ama staff searching for all Institution what we saved on previous step.
            LP = Navigation.GoToLoginPage(browser);
            ED = LP.LoginAsUser(role.Username, role.Password);
            Gcep = ED.ClickToAdvance(ED.GcepLnk);
            InstitutionsPage IP = Gcep.ClickToAdvance(Gcep.InstitutionManagLnk);

            ///  5.Getting contact emails for each institution saving them and Sign out.
            List<string> institutionContactEmailAdress = new List<string>();
            institutionContactEmailAdress = HelperMethods.GetTheInstutionsEmail(Browser, institutions);

            ///  6.Login as Admin who manages multyple Institution choosing each Institution and comparing contact email adresses.
           // if(BrowserName == BrowserNames.InternetExplorer) { IP.HeaderMenuDropDown.SendKeys(Keys.Tab); }
            IP.HeaderMenuDropDown.Click();           
            IP.SignOutLnk.Click();
            Thread.Sleep(2000);
            if (BrowserName == BrowserNames.InternetExplorer) { Thread.Sleep(2000); }
            LP = Navigation.GoToLoginPage(browser);
            ED = LP.LoginAsUser("10016185", "password");
            Gcep = ED.ClickToAdvance(ED.GcepLnk);
            HelpPage HP = Gcep.ClickToAdvance(Gcep.HelpfromYourInstitutionLnk);
           // HelpPage HP = Gcep.ClickToAdvance(Gcep.HelpLnk);

            ///  7.Verifiying emails are correct on help page for each Institution.
            //Assert.True(HP.AdministrationLnk.Displayed);
            //Assert.True(HP.AdminWatchVideoLnk.Displayed);
            Assert.IsTrue(HelperMethods.ComparingInstitutionEmailsWithHelpContactEmails(Browser, institutions, institutionContactEmailAdress));
          
        }

    }
        #endregion Tests
}
 

